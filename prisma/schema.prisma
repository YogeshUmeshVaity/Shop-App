// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Whenever you change schema in this file you need to execute the migrate command, to reflect the
// changes in the database:
// npx prisma migrate dev --name init

// Whenever you change schema directly in the database, you need to execute introspect command to
// reflect the changes here:
// npx prisma introspect

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// A user creates many Products. A User has a Cart. A User has many Orders.
model User {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  createdProducts Product[]
  cart            Cart?
  orders          Order[]

  @@map("user")
}

// A Product is created by a User. A Product belongs to many CartItems. A Product belongs to many
// OrderItems.
model Product {
  id              String      @id @default(uuid())
  title           String
  price           Float
  imageUrl        String
  description     String?     @db.Text
  createdByUser   User        @relation(fields: [createdByUserId], references: [id])
  createdByUserId String // This is a foreign key, also called relation scalar field
  cartItems       CartItem[]
  orderItems      OrderItem[]

  @@map("product")
}

// A Cart belongs to a User. A Cart has many CartItems.
model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  cartItems CartItem[]

  @@map("cart")
}

// This table establishes the many-to-many relationship between Product and Cart. That is equal to
// two one-to-many relationships: A Product belongs to many Carts and A Cart has many Products
// through CartItem.
model CartItem {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String

  @@map("cart_item")
}

// An Order belongs to a User. An Order has many OrderItems.
model Order {
  id         String      @id @default(uuid())
  User       User        @relation(fields: [userId], references: [id])
  userId     String
  orderItems OrderItem[]

  @@map("order")
}

// This model is similar to the CartItem.
// It establishes the many-to-many relationship between Product and Order. That is equal to
// two one-to-many relationships: A Product belongs to many Orders and An Order has many Products
// through OrderItem.
model OrderItem {
  id        String   @id @default(uuid())
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
  quantity  Int
  Order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?

  @@map("order_item")
}
